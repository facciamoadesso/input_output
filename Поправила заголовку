# Отделяйте ввод/вывод от обработки


Ключевой критерий качества кода — это стоимость внесения в него изменений. 
Если изменять программу сложно, то проект медленно развивается, несет убытки 
и, в конечном счете погибает. С другой стороны, бесконечно расширяемый и 
безгранично гибкий код — это как сферический конь в вакууме. Теоретически 
возможен, но практической ценности не несет.

Один из часто встречающихся и оправданных приемов — это отделение обработки 
данных от процесса ввода/вывода. Рассмотрим несколько примеров.

## Пример. Подбор онлайн-курса


По условию задачи нужно скачать из сети данные об онлайн-курсах, выбрать из 
них лучшие и сохранить результат в xlsx файл. Вот фрагмент кода:

def get_courses_list(courses_url):
    html = fetch_html(courses_url)
    if html:
        # .... parsing logic
        return courses_list
    else:
        print("can't load list of courses")
        exit()
Теперь примерим на себя роль провидца и подумаем какой функционал потребуется 
через месяц:

В случае сетевой ошибки взять паузу в 10 секунд и повторить попытку, затем 
подождать еще 30 секунд и так далее.
В случае если адрес недоступен - постучаться по другому url в зеркало сайта.
В случае ошибки сделать запись в лог и взять данные из ранее подготовленного 
кеша.
Как все это сделать когда def get_courses_list сама завершает программу ?! От 
вызова exit() надо отказаться. Можно выбросить исключение и таким образом 
сообщить о проблеме внешнему коду, пускай там разбираются.
